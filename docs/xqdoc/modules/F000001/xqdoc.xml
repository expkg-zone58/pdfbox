<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0"><xqdoc:control><xqdoc:date>2025-01-25T21:36:51.487Z</xqdoc:date><xqdoc:version>1.1</xqdoc:version></xqdoc:control><xqdoc:module type="library"><xqdoc:uri>org.expkg_zone58.Pdfbox3</xqdoc:uri><xqdoc:name>pdfbox</xqdoc:name><xqdoc:comment><xqdoc:description/></xqdoc:comment><xqdoc:body>xquery version '3.1';
(:~ 
pdfbox 3.0 https://pdfbox.apache.org/ BaseX 10.7+ interface library, 
requires pdfbox jar on classpath, tested with pdfbox-app-3.0.3.jar
@see download https://pdfbox.apache.org/download.cgi
@javadoc https://javadoc.io/static/org.apache.pdfbox/pdfbox/3.0.3/

:)
module namespace pdfbox="org.expkg_zone58.Pdfbox3";

declare namespace Loader ="java:org.apache.pdfbox.Loader"; 
declare namespace PDFTextStripper = "java:org.apache.pdfbox.text.PDFTextStripper";

(:~ 
@see https://javadoc.io/static/org.apache.pdfbox/pdfbox/3.0.0/org/apache/pdfbox/pdmodel/PDDocument.html 
:)
declare namespace PDDocument ="java:org.apache.pdfbox.pdmodel.PDDocument";

declare namespace PDDocumentCatalog ="java:org.apache.pdfbox.pdmodel.PDDocumentCatalog";
declare namespace PDPageLabels ="java:org.apache.pdfbox.pdmodel.common.PDPageLabels";

(:~ 
@see https://javadoc.io/static/org.apache.pdfbox/pdfbox/3.0.0/org/apache/pdfbox/multipdf/PageExtractor.html 
:)
declare namespace PageExtractor ="java:org.apache.pdfbox.multipdf.PageExtractor";
 
(:~ 
 @see https://javadoc.io/static/org.apache.pdfbox/pdfbox/3.0.0/org/apache/pdfbox/pdmodel/PDPageTree.html
:)
declare namespace PDPageTree ="java:org.apache.pdfbox.pdmodel.PDPageTree";

(:~ 
@see https://javadoc.io/static/org.apache.pdfbox/pdfbox/3.0.2/org/apache/pdfbox/pdmodel/interactive/documentnavigation/outline/PDDocumentOutline.html 
:)
declare namespace PDDocumentOutline ="java:org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDDocumentOutline";

declare namespace PDDocumentInformation ="java:org.apache.pdfbox.pdmodel.PDDocumentInformation";
(:~ 
@see https://javadoc.io/static/org.apache.pdfbox/pdfbox/3.0.0/org/apache/pdfbox/pdmodel/interactive/documentnavigation/outline/PDOutlineItem.html 
:)
declare namespace PDOutlineItem="java:org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem";
declare namespace PDFRenderer="java:org.apache.pdfbox.rendering.PDFRenderer";
declare namespace RandomAccessReadBufferedFile = "java:org.apache.pdfbox.io.RandomAccessReadBufferedFile";
declare namespace File ="java:java.io.File";

(:~ version of pdfbox:)
declare function pdfbox:version()
as xs:string{
  Q{java:org.apache.pdfbox.util.Version}getVersion()
};

(:~ open pdf, returns handle :)
declare function pdfbox:open($pdfpath as xs:string)
as item(){
  Loader:loadPDF( RandomAccessReadBufferedFile:new($pdfpath))
};

(:~ the PDF specification version this document conforms to.:)
declare function pdfbox:pdfVersion($doc as item())
as xs:float{
  PDDocument:getVersion($doc)
};

(:~ save pdf $doc to $savepath , returns $savepath :)
declare function pdfbox:save($doc as item(),$savepath as xs:string)
as xs:string{
   PDDocument:save($doc,File:new($savepath)),$savepath
};

declare function pdfbox:close($doc as item())
as empty-sequence(){
  (# db:wrapjava void #) {
     PDDocument:close($doc)
  }
};

declare function pdfbox:page-count($doc as item())
as xs:integer{
  PDDocument:getNumberOfPages($doc)
};

(:~ map with document metadata :)
declare function pdfbox:information($doc as item())
as map(*){
  let $info:=PDDocument:getDocumentInformation($doc)
  return map{
    "title": PDDocumentInformation:getTitle($info),
    "creator": PDDocumentInformation:getCreator($info),
    "producer": PDDocumentInformation:getProducer($info),
    "subject": PDDocumentInformation:getSubject($info),
     "keywords": PDDocumentInformation:getKeywords($info),
     "creationdate": pdfbox:gregToISO(PDDocumentInformation:getCreationDate($info)),
    "author": PDDocumentInformation:getAuthor($info)
  }
};

 (:~ convert date :)
declare
function pdfbox:gregToISO($item as item())
as xs:string{
 Q{java:java.util.GregorianCalendar}toZonedDateTime($item)=&gt;string()
};

(:~ outline for $doc as map()* :)
declare function pdfbox:outline($doc as item())
as map(*)*{
  (# db:wrapjava some #) {
  let $outline:=
                PDDocument:getDocumentCatalog($doc)
                =&gt;PDDocumentCatalog:getDocumentOutline()
 
  return  if(exists($outline))
          then pdfbox:outline($doc,PDOutlineItem:getFirstChild($outline)) 
  }
};

(:~ return bookmark info for children of $outlineItem as seq of maps :)
declare function pdfbox:outline($doc as item(),$outlineItem as item()?)

as map(*)*{
  let $find as map(*):=pdfbox:_outline($doc ,$outlineItem)
  return map:get($find,"list")
};

(: BaseX bug 10.7? error if inlined in outline :)
declare function pdfbox:_outline($doc as item(),$outlineItem as item()?)
as map(*){
 hof:until(
            function($output) { empty($output?this) },
            function($input ) { 
                      let $bk:= pdfbox:bookmark($input?this,$doc)
                      let $bk:= if($bk?hasChildren)
                                then let $kids:=pdfbox:outline($doc,PDOutlineItem:getFirstChild($input?this))
                                     return map:merge(($bk,map:entry("children",$kids)))
                                else $bk 
                      return map{
                            "list": ($input?list, $bk),
                            "this":  PDOutlineItem:getNextSibling($input?this)}
                          },
            map{"list":(),"this":$outlineItem}
        ) 
};
(:~ outline as xml :)
declare function pdfbox:outline-xml($outline as map(*)*)
as element(outline){
 element outline { 
   $outline!pdfbox:bookmark-xml(.)
 }
};

declare function pdfbox:bookmark-xml($outline as map(*)*)
as element(bookmark)*
{
  $outline!
  &lt;bookmark title="{?title}" index="{?index}"&gt;
    {?children!pdfbox:bookmark-xml(.)}
  &lt;/bookmark&gt;
};

(: return bookmark info for children of $outlineItem :)
declare function pdfbox:bookmark($bookmark as item(),$doc as item())
as map(*)
{
 map{ 
  "index":  PDOutlineItem:findDestinationPage($bookmark,$doc)=&gt;pdfbox:pageIndex($doc),
  "title":  (# db:checkstrings #) {PDOutlineItem:getTitle($bookmark)}=&gt;translate("ï¿½",""),
  "hasChildren": PDOutlineItem:hasChildren($bookmark)
  }
};

declare function pdfbox:outx($page ,$document)
{
  let $currentPage := PDOutlineItem:findDestinationPage($page,$document)
  let $pageNumber := pdfbox:pageIndex($currentPage,$document)
  return $pageNumber
};

(:~ pageIndex of $page in $document :)
declare function pdfbox:pageIndex(
   $page as item()? (: as java:org.apache.pdfbox.pdmodel.PDPage :),
   $document)
as item()?
{
  if(exists($page))
  then PDDocument:getDocumentCatalog($document)
      =&gt;PDDocumentCatalog:getPages()
      =&gt;PDPageTree:indexOf($page)
};            



(:~ save new PDF doc from 1 based page range 
@return save path :)
declare function pdfbox:extract($doc as item(), 
             $start as xs:integer,$end as xs:integer,$target as xs:string)
as xs:string
{
    let $a:=PageExtractor:new($doc, $start, $end) =&gt;PageExtractor:extract()
    return (pdfbox:save($a,$target),pdfbox:close($a)) 
};


(:~   pageLabel info
@see https://www.w3.org/TR/WCAG20-TECHS/PDF17.html#PDF17-examples
@see https://codereview.stackexchange.com/questions/286078/java-code-showing-page-labels-from-pdf-files
:)
declare function pdfbox:getPageLabels($doc as item())
as item()
{
  PDDocument:getDocumentCatalog($doc)
  =&gt;PDDocumentCatalog:getPageLabels()
};

(:~   pageLabel for every page:)
declare function pdfbox:pageLabels($doc as item())
as xs:string*
{
  PDDocument:getDocumentCatalog($doc)
  =&gt;PDDocumentCatalog:getPageLabels()
  =&gt;PDPageLabels:getLabelsByPageIndices()
};

(:~ return text on $pageNo :)
declare function pdfbox:getText($doc as item(), $pageNo as xs:integer)
as xs:string{
  let $tStripper := (# db:wrapjava instance #) {
         PDFTextStripper:new()
         =&gt; PDFTextStripper:setStartPage($pageNo)
         =&gt; PDFTextStripper:setEndPage($pageNo)
       }
  return (# db:checkstrings #) {PDFTextStripper:getText($tStripper,$doc)}
};

(:~ summary info as map for $pdfpath :)
declare function pdfbox:report($pdfpath as xs:string)
as map(*){
 let $doc:=pdfbox:open($pdfpath)
 return (map{
       "file":  $pdfpath,
       "pages": pdfbox:page-count($doc),
       "outline": pdfbox:outline($doc)=&gt;count()
        },pdfbox:information($doc)
)=&gt;map:merge()
};

(:~ java:bufferedImage for $pageNo using $scale times dpi= 72
@param $pageNo (ZERO based) 
@param $scale 1=72 dpi 
@return  Java java.awt.image.BufferedImage object
:)
declare function pdfbox:pageBufferedImage($doc as item(), $pageNo as xs:integer,$scale as xs:float)
as item(){
 PDFRenderer:new($doc)=&gt;PDFRenderer:renderImage($pageNo,$scale)
};

(:~ save bufferedimage to $dest 
@param $type = "gif","png" etc:)
declare function pdfbox:imageSave($bufferedImage as item(),$dest as xs:string,$type as xs:string)
as xs:boolean{
  Q{java:javax.imageio.ImageIO}write($bufferedImage , $type,  File:new($dest))
};

(:~ return image 
@param $type = "gif","png" etc:)
declare function pdfbox:imageBinary($bufferedImage as item(),$type as xs:string)
as xs:base64Binary{
  let $bytes:=Q{java:java.io.ByteArrayOutputStream}new()
  let $_:=Q{java:javax.imageio.ImageIO}write($bufferedImage , $type,  $bytes)
  return Q{java:java.io.ByteArrayOutputStream}toByteArray($bytes)
         =&gt;convert:integers-to-base64()
};</xqdoc:body></xqdoc:module><xqdoc:namespaces><xqdoc:namespace prefix="pdfbox" uri="org.expkg_zone58.Pdfbox3"/><xqdoc:namespace prefix="Loader" uri="java:org.apache.pdfbox.Loader"/><xqdoc:namespace prefix="PDFTextStripper" uri="java:org.apache.pdfbox.text.PDFTextStripper"/><xqdoc:namespace prefix="PDDocument" uri="java:org.apache.pdfbox.pdmodel.PDDocument"><xqdoc:comment><xqdoc:description/></xqdoc:comment></xqdoc:namespace><xqdoc:namespace prefix="PDDocumentCatalog" uri="java:org.apache.pdfbox.pdmodel.PDDocumentCatalog"/><xqdoc:namespace prefix="PDPageLabels" uri="java:org.apache.pdfbox.pdmodel.common.PDPageLabels"/><xqdoc:namespace prefix="PageExtractor" uri="java:org.apache.pdfbox.multipdf.PageExtractor"><xqdoc:comment><xqdoc:description/></xqdoc:comment></xqdoc:namespace><xqdoc:namespace prefix="PDPageTree" uri="java:org.apache.pdfbox.pdmodel.PDPageTree"><xqdoc:comment><xqdoc:description/></xqdoc:comment></xqdoc:namespace><xqdoc:namespace prefix="PDDocumentOutline" uri="java:org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDDocumentOutline"><xqdoc:comment><xqdoc:description/></xqdoc:comment></xqdoc:namespace><xqdoc:namespace prefix="PDDocumentInformation" uri="java:org.apache.pdfbox.pdmodel.PDDocumentInformation"/><xqdoc:namespace prefix="PDOutlineItem" uri="java:org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem"><xqdoc:comment><xqdoc:description/></xqdoc:comment></xqdoc:namespace><xqdoc:namespace prefix="PDFRenderer" uri="java:org.apache.pdfbox.rendering.PDFRenderer"/><xqdoc:namespace prefix="RandomAccessReadBufferedFile" uri="java:org.apache.pdfbox.io.RandomAccessReadBufferedFile"/><xqdoc:namespace prefix="File" uri="java:java.io.File"/><xqdoc:namespace prefix="xs" uri="http://www.w3.org/2001/XMLSchema"/><xqdoc:namespace prefix="db" uri="http://basex.org/modules/db"/><xqdoc:namespace prefix="map" uri="http://www.w3.org/2005/xpath-functions/map"/><xqdoc:namespace prefix="hof" uri="http://basex.org/modules/hof"/><xqdoc:namespace prefix="convert" uri="http://basex.org/modules/convert"/></xqdoc:namespaces><xqdoc:variables/><xqdoc:functions><xqdoc:function arity="0"><xqdoc:comment><xqdoc:description/></xqdoc:comment><xqdoc:name>pdfbox:version</xqdoc:name><xqdoc:signature>function pdfbox:version ( ) as xs:string { Q{java:org.apache.pdfbox.util.Version}getVersion() }</xqdoc:signature><xqdoc:return><xqdoc:type>xs:string</xqdoc:type></xqdoc:return><xqdoc:body>function pdfbox:version()
as xs:string{
  Q{java:org.apache.pdfbox.util.Version}getVersion()
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description/></xqdoc:comment><xqdoc:name>pdfbox:open</xqdoc:name><xqdoc:signature>function pdfbox:open ( $pdfpath as xs:string ) as item() { Loader:loadPDF( RandomAccessReadBufferedFile:new($pdfpath)) }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>pdfpath</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>item()</xqdoc:type></xqdoc:return><xqdoc:body>function pdfbox:open($pdfpath as xs:string)
as item(){
  Loader:loadPDF( RandomAccessReadBufferedFile:new($pdfpath))
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description/></xqdoc:comment><xqdoc:name>pdfbox:pdfVersion</xqdoc:name><xqdoc:signature>function pdfbox:pdfVersion ( $doc as item() ) as xs:float { PDDocument:getVersion($doc) }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>doc</xqdoc:name><xqdoc:type>item()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:float</xqdoc:type></xqdoc:return><xqdoc:body>function pdfbox:pdfVersion($doc as item())
as xs:float{
  PDDocument:getVersion($doc)
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description/></xqdoc:comment><xqdoc:name>pdfbox:save</xqdoc:name><xqdoc:signature>function pdfbox:save ( $doc as item(),$savepath as xs:string ) as xs:string { PDDocument:save($doc,File:new($savepath)),$savepath }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>doc</xqdoc:name><xqdoc:type>item()</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>savepath</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:string</xqdoc:type></xqdoc:return><xqdoc:body>function pdfbox:save($doc as item(),$savepath as xs:string)
as xs:string{
   PDDocument:save($doc,File:new($savepath)),$savepath
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:name>pdfbox:close</xqdoc:name><xqdoc:signature>function pdfbox:close ( $doc as item() ) as empty-sequence() { (# db:wrapjava void #) { PDDocument:close($doc) } }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>doc</xqdoc:name><xqdoc:type>item()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>empty-sequence</xqdoc:type></xqdoc:return><xqdoc:body>function pdfbox:close($doc as item())
as empty-sequence(){
  (# db:wrapjava void #) {
     PDDocument:close($doc)
  }
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:name>pdfbox:page-count</xqdoc:name><xqdoc:signature>function pdfbox:page-count ( $doc as item() ) as xs:integer { PDDocument:getNumberOfPages($doc) }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>doc</xqdoc:name><xqdoc:type>item()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:integer</xqdoc:type></xqdoc:return><xqdoc:body>function pdfbox:page-count($doc as item())
as xs:integer{
  PDDocument:getNumberOfPages($doc)
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description/></xqdoc:comment><xqdoc:name>pdfbox:information</xqdoc:name><xqdoc:signature>function pdfbox:information ( $doc as item() ) as map(*) { let $info:=PDDocument:getDocumentInformation($doc) return map{ "title": PDDocumentInformation:getTitle($info), "creator": PDDocumentInformation:getCreator($info), "producer": PDDocumentInformation:getProducer($info), "subject": PDDocumentInformation:getSubject($info), "keywords": PDDocumentInformation:getKeywords($info), "creationdate": pdfbox:gregToISO(PDDocumentInformation:getCreationDate($info)), "author": PDDocumentInformation:getAuthor($info) } }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>doc</xqdoc:name><xqdoc:type>item()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>map(*)</xqdoc:type></xqdoc:return><xqdoc:body>function pdfbox:information($doc as item())
as map(*){
  let $info:=PDDocument:getDocumentInformation($doc)
  return map{
    "title": PDDocumentInformation:getTitle($info),
    "creator": PDDocumentInformation:getCreator($info),
    "producer": PDDocumentInformation:getProducer($info),
    "subject": PDDocumentInformation:getSubject($info),
     "keywords": PDDocumentInformation:getKeywords($info),
     "creationdate": pdfbox:gregToISO(PDDocumentInformation:getCreationDate($info)),
    "author": PDDocumentInformation:getAuthor($info)
  }
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description/></xqdoc:comment><xqdoc:name>pdfbox:gregToISO</xqdoc:name><xqdoc:signature>function pdfbox:gregToISO ( $item as item() ) as xs:string { Q{java:java.util.GregorianCalendar}toZonedDateTime($item)=&gt;string() }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>item</xqdoc:name><xqdoc:type>item()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:string</xqdoc:type></xqdoc:return><xqdoc:body>function pdfbox:gregToISO($item as item())
as xs:string{
 Q{java:java.util.GregorianCalendar}toZonedDateTime($item)=&gt;string()
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description/></xqdoc:comment><xqdoc:name>pdfbox:outline</xqdoc:name><xqdoc:signature>function pdfbox:outline ( $doc as item() ) as map(*)* { (# db:wrapjava some #) { let $outline:= PDDocument:getDocumentCatalog($doc) =&gt;PDDocumentCatalog:getDocumentOutline() return if(exists($outline)) then pdfbox:outline($doc,PDOutlineItem:getFirstChild($outline)) } }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>doc</xqdoc:name><xqdoc:type>item()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">map(*)</xqdoc:type></xqdoc:return><xqdoc:body>function pdfbox:outline($doc as item())
as map(*)*{
  (# db:wrapjava some #) {
  let $outline:=
                PDDocument:getDocumentCatalog($doc)
                =&gt;PDDocumentCatalog:getDocumentOutline()
 
  return  if(exists($outline))
          then pdfbox:outline($doc,PDOutlineItem:getFirstChild($outline)) 
  }
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description/></xqdoc:comment><xqdoc:name>pdfbox:outline</xqdoc:name><xqdoc:signature>function pdfbox:outline ( $doc as item(),$outlineItem as item()? ) as map(*)* { let $find as map(*):=pdfbox:_outline($doc ,$outlineItem) return map:get($find,"list") }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>doc</xqdoc:name><xqdoc:type>item()</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>outlineItem</xqdoc:name><xqdoc:type occurrence="?">item()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">map(*)</xqdoc:type></xqdoc:return><xqdoc:body>function pdfbox:outline($doc as item(),$outlineItem as item()?)

as map(*)*{
  let $find as map(*):=pdfbox:_outline($doc ,$outlineItem)
  return map:get($find,"list")
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:name>pdfbox:_outline</xqdoc:name><xqdoc:signature>function pdfbox:_outline ( $doc as item(),$outlineItem as item()? ) as map(*) { hof:until( function($output) { empty($output?this) }, function($input ) { let $bk:= pdfbox:bookmark($input?this,$doc) let $bk:= if($bk?hasChildren) then let $kids:=pdfbox:outline($doc,PDOutlineItem:getFirstChild($input?this)) return map:merge(($bk,map:entry("children",$kids))) else $bk return map{ "list": ($input?list, $bk), "this": PDOutlineItem:getNextSibling($input?this)} }, map{"list":(),"this":$outlineItem} ) }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>doc</xqdoc:name><xqdoc:type>item()</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>outlineItem</xqdoc:name><xqdoc:type occurrence="?">item()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>map(*)</xqdoc:type></xqdoc:return><xqdoc:body>function pdfbox:_outline($doc as item(),$outlineItem as item()?)
as map(*){
 hof:until(
            function($output) { empty($output?this) },
            function($input ) { 
                      let $bk:= pdfbox:bookmark($input?this,$doc)
                      let $bk:= if($bk?hasChildren)
                                then let $kids:=pdfbox:outline($doc,PDOutlineItem:getFirstChild($input?this))
                                     return map:merge(($bk,map:entry("children",$kids)))
                                else $bk 
                      return map{
                            "list": ($input?list, $bk),
                            "this":  PDOutlineItem:getNextSibling($input?this)}
                          },
            map{"list":(),"this":$outlineItem}
        ) 
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description/></xqdoc:comment><xqdoc:name>pdfbox:outline-xml</xqdoc:name><xqdoc:signature>function pdfbox:outline-xml ( $outline as map(*)* ) as element(outline) { element outline { $outline!pdfbox:bookmark-xml(.) } }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>outline</xqdoc:name><xqdoc:type occurrence="*">map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>element(outline)</xqdoc:type></xqdoc:return><xqdoc:body>function pdfbox:outline-xml($outline as map(*)*)
as element(outline){
 element outline { 
   $outline!pdfbox:bookmark-xml(.)
 }
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:name>pdfbox:bookmark-xml</xqdoc:name><xqdoc:signature>function pdfbox:bookmark-xml ( $outline as map(*)* ) as element(bookmark)* { $outline! &lt;bookmark title="{?title}" index="{?index}"&gt; {?children!pdfbox:bookmark-xml(.)} &lt;/bookmark&gt; }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>outline</xqdoc:name><xqdoc:type occurrence="*">map(*)</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">element(bookmark)</xqdoc:type></xqdoc:return><xqdoc:body>function pdfbox:bookmark-xml($outline as map(*)*)
as element(bookmark)*
{
  $outline!
  &lt;bookmark title="{?title}" index="{?index}"&gt;
    {?children!pdfbox:bookmark-xml(.)}
  &lt;/bookmark&gt;
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:name>pdfbox:bookmark</xqdoc:name><xqdoc:signature>function pdfbox:bookmark ( $bookmark as item(),$doc as item() ) as map(*) { map{ "index": PDOutlineItem:findDestinationPage($bookmark,$doc)=&gt;pdfbox:pageIndex($doc), "title": (# db:checkstrings #) {PDOutlineItem:getTitle($bookmark)}=&gt;translate("ï¿½",""), "hasChildren": PDOutlineItem:hasChildren($bookmark) } }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>bookmark</xqdoc:name><xqdoc:type>item()</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>doc</xqdoc:name><xqdoc:type>item()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>map(*)</xqdoc:type></xqdoc:return><xqdoc:body>function pdfbox:bookmark($bookmark as item(),$doc as item())
as map(*)
{
 map{ 
  "index":  PDOutlineItem:findDestinationPage($bookmark,$doc)=&gt;pdfbox:pageIndex($doc),
  "title":  (# db:checkstrings #) {PDOutlineItem:getTitle($bookmark)}=&gt;translate("ï¿½",""),
  "hasChildren": PDOutlineItem:hasChildren($bookmark)
  }
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:name>pdfbox:outx</xqdoc:name><xqdoc:signature>function pdfbox:outx ( $page ,$document ) { let $currentPage := PDOutlineItem:findDestinationPage($page,$document) let $pageNumber := pdfbox:pageIndex($currentPage,$document) return $pageNumber }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>page</xqdoc:name></xqdoc:parameter><xqdoc:parameter><xqdoc:name>document</xqdoc:name></xqdoc:parameter></xqdoc:parameters><xqdoc:body>function pdfbox:outx($page ,$document)
{
  let $currentPage := PDOutlineItem:findDestinationPage($page,$document)
  let $pageNumber := pdfbox:pageIndex($currentPage,$document)
  return $pageNumber
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description/></xqdoc:comment><xqdoc:name>pdfbox:pageIndex</xqdoc:name><xqdoc:signature>function pdfbox:pageIndex ( $page as item()? (: as java:org.apache.pdfbox.pdmodel.PDPage :), $document ) as item()? { if(exists($page)) then PDDocument:getDocumentCatalog($document) =&gt;PDDocumentCatalog:getPages() =&gt;PDPageTree:indexOf($page) }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>page</xqdoc:name><xqdoc:type occurrence="?">item()</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>document</xqdoc:name></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="?">item()</xqdoc:type></xqdoc:return><xqdoc:body>function pdfbox:pageIndex(
   $page as item()? (: as java:org.apache.pdfbox.pdmodel.PDPage :),
   $document)
as item()?
{
  if(exists($page))
  then PDDocument:getDocumentCatalog($document)
      =&gt;PDDocumentCatalog:getPages()
      =&gt;PDPageTree:indexOf($page)
}</xqdoc:body></xqdoc:function><xqdoc:function arity="4"><xqdoc:comment><xqdoc:description/></xqdoc:comment><xqdoc:name>pdfbox:extract</xqdoc:name><xqdoc:signature>function pdfbox:extract ( $doc as item(), $start as xs:integer,$end as xs:integer,$target as xs:string ) as xs:string { let $a:=PageExtractor:new($doc, $start, $end) =&gt;PageExtractor:extract() return (pdfbox:save($a,$target),pdfbox:close($a)) }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>doc</xqdoc:name><xqdoc:type>item()</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>start</xqdoc:name><xqdoc:type>xs:integer</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>end</xqdoc:name><xqdoc:type>xs:integer</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>target</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:string</xqdoc:type></xqdoc:return><xqdoc:body>function pdfbox:extract($doc as item(), 
             $start as xs:integer,$end as xs:integer,$target as xs:string)
as xs:string
{
    let $a:=PageExtractor:new($doc, $start, $end) =&gt;PageExtractor:extract()
    return (pdfbox:save($a,$target),pdfbox:close($a)) 
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description/></xqdoc:comment><xqdoc:name>pdfbox:getPageLabels</xqdoc:name><xqdoc:signature>function pdfbox:getPageLabels ( $doc as item() ) as item() { PDDocument:getDocumentCatalog($doc) =&gt;PDDocumentCatalog:getPageLabels() }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>doc</xqdoc:name><xqdoc:type>item()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>item()</xqdoc:type></xqdoc:return><xqdoc:body>function pdfbox:getPageLabels($doc as item())
as item()
{
  PDDocument:getDocumentCatalog($doc)
  =&gt;PDDocumentCatalog:getPageLabels()
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description/></xqdoc:comment><xqdoc:name>pdfbox:pageLabels</xqdoc:name><xqdoc:signature>function pdfbox:pageLabels ( $doc as item() ) as xs:string* { PDDocument:getDocumentCatalog($doc) =&gt;PDDocumentCatalog:getPageLabels() =&gt;PDPageLabels:getLabelsByPageIndices() }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>doc</xqdoc:name><xqdoc:type>item()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">xs:string</xqdoc:type></xqdoc:return><xqdoc:body>function pdfbox:pageLabels($doc as item())
as xs:string*
{
  PDDocument:getDocumentCatalog($doc)
  =&gt;PDDocumentCatalog:getPageLabels()
  =&gt;PDPageLabels:getLabelsByPageIndices()
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description/></xqdoc:comment><xqdoc:name>pdfbox:getText</xqdoc:name><xqdoc:signature>function pdfbox:getText ( $doc as item(), $pageNo as xs:integer ) as xs:string { let $tStripper := (# db:wrapjava instance #) { PDFTextStripper:new() =&gt; PDFTextStripper:setStartPage($pageNo) =&gt; PDFTextStripper:setEndPage($pageNo) } return (# db:checkstrings #) {PDFTextStripper:getText($tStripper,$doc)} }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>doc</xqdoc:name><xqdoc:type>item()</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>pageNo</xqdoc:name><xqdoc:type>xs:integer</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:string</xqdoc:type></xqdoc:return><xqdoc:body>function pdfbox:getText($doc as item(), $pageNo as xs:integer)
as xs:string{
  let $tStripper := (# db:wrapjava instance #) {
         PDFTextStripper:new()
         =&gt; PDFTextStripper:setStartPage($pageNo)
         =&gt; PDFTextStripper:setEndPage($pageNo)
       }
  return (# db:checkstrings #) {PDFTextStripper:getText($tStripper,$doc)}
}</xqdoc:body></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description/></xqdoc:comment><xqdoc:name>pdfbox:report</xqdoc:name><xqdoc:signature>function pdfbox:report ( $pdfpath as xs:string ) as map(*) { let $doc:=pdfbox:open($pdfpath) return (map{ "file": $pdfpath, "pages": pdfbox:page-count($doc), "outline": pdfbox:outline($doc)=&gt;count() },pdfbox:information($doc) )=&gt;map:merge() }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>pdfpath</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>map(*)</xqdoc:type></xqdoc:return><xqdoc:body>function pdfbox:report($pdfpath as xs:string)
as map(*){
 let $doc:=pdfbox:open($pdfpath)
 return (map{
       "file":  $pdfpath,
       "pages": pdfbox:page-count($doc),
       "outline": pdfbox:outline($doc)=&gt;count()
        },pdfbox:information($doc)
)=&gt;map:merge()
}</xqdoc:body></xqdoc:function><xqdoc:function arity="3"><xqdoc:comment><xqdoc:description/></xqdoc:comment><xqdoc:name>pdfbox:pageBufferedImage</xqdoc:name><xqdoc:signature>function pdfbox:pageBufferedImage ( $doc as item(), $pageNo as xs:integer,$scale as xs:float ) as item() { PDFRenderer:new($doc)=&gt;PDFRenderer:renderImage($pageNo,$scale) }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>doc</xqdoc:name><xqdoc:type>item()</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>pageNo</xqdoc:name><xqdoc:type>xs:integer</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>scale</xqdoc:name><xqdoc:type>xs:float</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>item()</xqdoc:type></xqdoc:return><xqdoc:body>function pdfbox:pageBufferedImage($doc as item(), $pageNo as xs:integer,$scale as xs:float)
as item(){
 PDFRenderer:new($doc)=&gt;PDFRenderer:renderImage($pageNo,$scale)
}</xqdoc:body></xqdoc:function><xqdoc:function arity="3"><xqdoc:comment><xqdoc:description/></xqdoc:comment><xqdoc:name>pdfbox:imageSave</xqdoc:name><xqdoc:signature>function pdfbox:imageSave ( $bufferedImage as item(),$dest as xs:string,$type as xs:string ) as xs:boolean { Q{java:javax.imageio.ImageIO}write($bufferedImage , $type, File:new($dest)) }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>bufferedImage</xqdoc:name><xqdoc:type>item()</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>dest</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>type</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:boolean</xqdoc:type></xqdoc:return><xqdoc:body>function pdfbox:imageSave($bufferedImage as item(),$dest as xs:string,$type as xs:string)
as xs:boolean{
  Q{java:javax.imageio.ImageIO}write($bufferedImage , $type,  File:new($dest))
}</xqdoc:body></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description/></xqdoc:comment><xqdoc:name>pdfbox:imageBinary</xqdoc:name><xqdoc:signature>function pdfbox:imageBinary ( $bufferedImage as item(),$type as xs:string ) as xs:base64Binary { let $bytes:=Q{java:java.io.ByteArrayOutputStream}new() let $_:=Q{java:javax.imageio.ImageIO}write($bufferedImage , $type, $bytes) return Q{java:java.io.ByteArrayOutputStream}toByteArray($bytes) =&gt;convert:integers-to-base64() }</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>bufferedImage</xqdoc:name><xqdoc:type>item()</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>type</xqdoc:name><xqdoc:type>xs:string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>xs:base64Binary</xqdoc:type></xqdoc:return><xqdoc:body>function pdfbox:imageBinary($bufferedImage as item(),$type as xs:string)
as xs:base64Binary{
  let $bytes:=Q{java:java.io.ByteArrayOutputStream}new()
  let $_:=Q{java:javax.imageio.ImageIO}write($bufferedImage , $type,  $bytes)
  return Q{java:java.io.ByteArrayOutputStream}toByteArray($bytes)
         =&gt;convert:integers-to-base64()
}</xqdoc:body></xqdoc:function></xqdoc:functions></xqdoc:xqdoc>